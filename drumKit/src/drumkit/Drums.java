/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package drumkit;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Toby
 */
public class Drums extends javax.swing.JFrame {

    /**
     * Creates new form Drums
     */
    public static boolean recording = false;
    public static ArrayList<String> yourRecording = new ArrayList<>();
    public static ArrayList<Integer> timeBetweenBeatsInMillis = new ArrayList<>();
    public static int timeOfLastBeat;

    public Drums() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MediumTom = new javax.swing.JButton();
        Snare = new javax.swing.JButton();
        LargeTom = new javax.swing.JButton();
        Crash = new javax.swing.JButton();
        SmallTom = new javax.swing.JButton();
        Hihat = new javax.swing.JButton();
        Ride = new javax.swing.JButton();
        Bass = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        recordStop = new javax.swing.JButton();
        playRecording = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        MediumTom.setBackground(new java.awt.Color(248, 248, 248));
        MediumTom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MediumTom.setText("Medium Tom");
        MediumTom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MediumTomActionPerformed(evt);
            }
        });
        getContentPane().add(MediumTom);
        MediumTom.setBounds(621, 153, 130, 30);

        Snare.setBackground(new java.awt.Color(242, 242, 242));
        Snare.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Snare.setText("Snare");
        Snare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SnareActionPerformed(evt);
            }
        });
        getContentPane().add(Snare);
        Snare.setBounds(240, 370, 110, 30);

        LargeTom.setBackground(new java.awt.Color(245, 245, 245));
        LargeTom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LargeTom.setText("Large Tom");
        LargeTom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LargeTomActionPerformed(evt);
            }
        });
        getContentPane().add(LargeTom);
        LargeTom.setBounds(780, 390, 140, 40);

        Crash.setBackground(new java.awt.Color(255, 204, 153));
        Crash.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Crash.setText("Crash");
        Crash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrashActionPerformed(evt);
            }
        });
        getContentPane().add(Crash);
        Crash.setBounds(240, 60, 110, 40);

        SmallTom.setBackground(new java.awt.Color(244, 244, 244));
        SmallTom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SmallTom.setText("Small Tom");
        SmallTom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmallTomActionPerformed(evt);
            }
        });
        getContentPane().add(SmallTom);
        SmallTom.setBounds(390, 150, 110, 40);

        Hihat.setBackground(new java.awt.Color(255, 204, 153));
        Hihat.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Hihat.setText("Hi-Hat");
        Hihat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HihatActionPerformed(evt);
            }
        });
        getContentPane().add(Hihat);
        Hihat.setBounds(150, 220, 110, 30);

        Ride.setBackground(new java.awt.Color(255, 204, 153));
        Ride.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Ride.setText("Ride");
        Ride.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RideActionPerformed(evt);
            }
        });
        getContentPane().add(Ride);
        Ride.setBounds(843, 83, 130, 40);

        Bass.setBackground(new java.awt.Color(153, 153, 153));
        Bass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Bass.setText("Bass");
        Bass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BassActionPerformed(evt);
            }
        });
        getContentPane().add(Bass);
        Bass.setBounds(500, 420, 120, 70);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drumkit/drums.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-40, -50, 1160, 1160);

        recordStop.setBackground(new java.awt.Color(102, 204, 255));
        recordStop.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        recordStop.setText("Record");
        recordStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordStopActionPerformed(evt);
            }
        });
        getContentPane().add(recordStop);
        recordStop.setBounds(1150, 203, 90, 50);

        playRecording.setBackground(new java.awt.Color(204, 204, 255));
        playRecording.setText("PlayRecording");
        playRecording.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playRecordingActionPerformed(evt);
            }
        });
        getContentPane().add(playRecording);
        playRecording.setBounds(1130, 300, 130, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void playSound(String filepath) {
        InputStream music;
        try {
            music = new FileInputStream(new File(filepath));
            AudioStream audio = new AudioStream(music);
            AudioPlayer.player.start(audio);
            if (recording) {
                yourRecording.add(filepath);
                int temp = (int) (-System.currentTimeMillis());
                timeBetweenBeatsInMillis.add(timeOfLastBeat - temp);
                timeOfLastBeat = temp;
            }
        } catch (Exception e) {
            System.out.println("ERROR: " + e);
        }
    }

    private void MediumTomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MediumTomActionPerformed
        playSound("Music\\\\MediumTom.wav");
    }//GEN-LAST:event_MediumTomActionPerformed

    private void SnareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SnareActionPerformed
        playSound("Music\\\\SnareDrum.wav");
    }//GEN-LAST:event_SnareActionPerformed

    private void LargeTomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LargeTomActionPerformed
        playSound("Music\\\\TomDrum.wav");
    }//GEN-LAST:event_LargeTomActionPerformed

    private void CrashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrashActionPerformed
        playSound("Music\\\\CrashCymbal.wav");
    }//GEN-LAST:event_CrashActionPerformed

    private void SmallTomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmallTomActionPerformed
        playSound("Music\\\\\\\\SmallTomDrumHit.wav");
    }//GEN-LAST:event_SmallTomActionPerformed

    private void HihatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HihatActionPerformed
        playSound("Music\\\\HiHat.wav");
    }//GEN-LAST:event_HihatActionPerformed

    private void RideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RideActionPerformed
        playSound("Music\\\\RideCymbalCrash.wav");
    }//GEN-LAST:event_RideActionPerformed

    private void BassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BassActionPerformed
        playSound("Music\\\\BassDrum.wav");
    }//GEN-LAST:event_BassActionPerformed

    private void recordStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordStopActionPerformed
        recording = !recording;
        if (recording) {
            recordStop.setText("Stop");
            yourRecording.clear();
            timeBetweenBeatsInMillis.clear();
            timeOfLastBeat = (int) (-System.currentTimeMillis());
        } else {
            recordStop.setText("Record");
        }
    }//GEN-LAST:event_recordStopActionPerformed

    private void playRecordingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playRecordingActionPerformed
        if (!recording) {
            for (int i = 0; i < yourRecording.size(); i++) {
                try {
                    TimeUnit.MILLISECONDS.sleep(timeBetweenBeatsInMillis.get(i));
                } catch (InterruptedException ex) {
                    Logger.getLogger(Drums.class.getName()).log(Level.SEVERE, null, ex);
                }
                playSound(yourRecording.get(i));
            }
        } else {
            JOptionPane.showMessageDialog(null, "Finish your recording first");
        }
    }//GEN-LAST:event_playRecordingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Drums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Drums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Drums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Drums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Drums().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton Bass;
    public static javax.swing.JButton Crash;
    public static javax.swing.JButton Hihat;
    public static javax.swing.JButton LargeTom;
    public static javax.swing.JButton MediumTom;
    public static javax.swing.JButton Ride;
    public static javax.swing.JButton SmallTom;
    public static javax.swing.JButton Snare;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton playRecording;
    private javax.swing.JButton recordStop;
    // End of variables declaration//GEN-END:variables
}
